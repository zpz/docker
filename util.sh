function download_dotfiles() {
    dest=$1
    curl -sL https://github.com/zpz/linux/archive/master.tar.gz -o - |tar xz -C "$dest"
    mv "$dest"/linux-master "$dest"/dotfiles
}


function remove_dotfiles() {
    dest=$1
    rm -rf "$dest"/dotfiles
}


read -rd '' HEADER <<'EOF'
#==================================
# Generated by 'build.sh'.
#
# DO NOT EDIT.
#==================================
EOF


read -rd '' CREATE_USER <<'EOF'
ENV HOME=/home/${USER}

RUN groupadd --gid 1000 ${GROUP} \
    && mkdir -p ${HOME} \
    && useradd --uid 1000 --gid ${GROUP} --no-user-group --home ${HOME} --shell /bin/bash ${USER} \
    && chown -R ${USER}:${GROUP} ${HOME}
EOF


read -rd '' INSTALL_BASICS <<'EOF'
# 'curl': about 15 MB.
# 'locales': about 16MB.

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        apt-utils \
        curl \
        less \
        locales \
    \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

# Locale
#   default is C.UTF-8

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

RUN echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen \
    && locale-gen en_US.UTF-8 \
    && /usr/sbin/update-locale LANG=en_US.UTF-8

# bash customization
#
ENV SHELL=/bin/bash
COPY ./dotfiles/bash/bashrc /etc/bash.bashrc
RUN chmod +r /etc/bash.bashrc
EOF


read -rd '' INSTALL_TINI <<'EOF'
ENV TINI_VERSION v0.9.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

ENTRYPOINT ["/usr/bin/tini", "--"]
# TODO: problematic when I terminate some programs within container.
EOF


read -rd '' INSTALL_VIM <<'EOF'
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        vim \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

COPY ./dotfiles/vim/vimrc /etc/vim/vimrc.local
COPY ./dotfiles/vim/vim/ /etc/vim/
RUN chmod -R +rX /etc/vim

ENV EDITOR vim
EOF


read -rd '' INSTALL_GIT <<'EOF'
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        git \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

COPY ./dotfiles/git/gitconfig /etc/gitconfig
RUN chmod +r /etc/gitconfig
EOF


read -rd '' INSTALL_PY_BASIC <<'EOF'
RUN pip install --no-cache-dir --upgrade \
        'pip==8.1.1' \
        'setuptools==20.10.1' \
        'wheel==0.29.0' \
    && pip install --no-cache-dir --upgrade \
        'numpy==1.11.0' \
        'pytest==2.9.1' \
        'requests==2.10.0' \
        'sh==1.11' \
        'toolz==0.7.4' \
    && ln -s /usr/local/bin/py.test /usr/local/bin/pytest
EOF


read -rd '' INSTALL_PY_DEV <<'EOF'
RUN pip install --no-cache-dir --upgrade \
        'ipdb==0.10.0' \
        'pylint==1.5.5' \
        'pytest-cov==2.2.1' \
        'pudb==2016.1' \
        'yapf==0.7.1' \
    \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        pkg-config \
    && pip install --no-cache-dir --upgrade \
        'line_profiler==1.0' \
        'notebook==4.2.0' \
    && apt-get purge -y --auto-remove \
        build-essential \
        pkg-config \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

# notebook will install ipython, pyzmq, tornado, jinja2 and some other things.

ENV NOTEBOOKPORT 8888
EXPOSE $NOTEBOOKPORT

RUN echo '#!/usr/bin/env bash' > /usr/local/bin/notebook \
    && echo >> /usr/local/bin/notebook \
    && echo 'jupyter notebook --port=$NOTEBOOKPORT --no-browser --ip=0.0.0.0' >> /usr/local/bin/notebook \
    && chmod +x /usr/local/bin/notebook
EOF

