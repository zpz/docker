set -o nounset
set -o pipefail

thisfile="${BASH_SOURCE[0]}"
thisdir=$( cd "$( dirname "${thisfile}" )" && pwd )
parentdir=$(dirname "${thisdir}")
parent_name=$(cat "${parentdir}"/name)
parent_version=$(cat "${parentdir}"/version)
PARENT="${parent_name}":"${parent_version}"

version=$(cat "${thisdir}"/version)
if [[ "${version}" < "${parent_version}" ]]; then
    echo "${parent_version}" > "${thisdir}"/version
    version=${parent_version}
fi
NAME="$(cat "${thisdir}/name"):${version}"


echo
echo =====================================================
echo Creating Dockerfile for ${NAME}
cat > "${thisdir}/Dockerfile" <<EOF
# Dockerfile for image '${NAME}'
# Generated by 'build.sh'.
#
# DO NOT EDIT.

FROM ${PARENT}
USER root
EOF

cat >> "${thisdir}/Dockerfile" <<'EOF'

# Regarding installing packages in backports, see
#  https://backports.debian.org/Instructions
#
# For Java 8, use jessie-backports.
# For Java 9, use stretch-backports.


ENV JAVA_MAJOR_VERSION 8
ENV DEBIAN_CODENAME=jessie
RUN echo "deb http://ftp.debian.org/debian ${DEBIAN_CODENAME}-backports main" >> /etc/apt/sources.list \
    & apt-get update \
    && apt-get install -y --no-install-recommends -t ${DEBIAN_CODENAME}-backports \
        openjdk-${JAVA_MAJOR_VERSION}-jdk \
    && rm -rf /var/lib/apt/lists/* /tmp/*

#&& apt-get install -y --no-install-recommends -t ${DEBIAN_CODENAME}-backports \

# # 11 Mb
# ENV MAVEN_VERSION 3.5.2
# ENV MAVEN_HOME /usr/lib/maven
# ARG MAVEN_BASE_URL=http://www-eu.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries
# RUN mkdir -p ${MAVEN_HOME} \
#     && curl -skL --retry 3 ${MAVEN_BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \
#         | tar xz -C ${MAVEN_HOME}
# ENV PATH ${PATH}:${MAVEN_HOME}/apache-maven-${MAVEN_VERSION}/bin

# # 80 Mb
# ENV GRADLE_VERSION 4.3.1
# ENV GRADLE_HOME /usr/lib/gradle
# ARG GRADLE_BASE_URL=https://services.gradle.org/distributions
# RUN mkdir -p ${GRADLE_HOME} \
#     && curl -skL --retry 3 ${GRADLE_BASE_URL}/gradle-${GRADLE_VERSION}-bin.zip \
#         -o ${GRADLE_HOME}/gradle.zip \
#     && (cd ${GRADLE_HOME}; unzip gradle.zip; rm -f gradle.zip)
# ENV GRADLE_HOME ${GRADLE_HOME}/gradle-${GRADLE_VERSION}
# ENV PATH ${PATH}:${GRADLE_HOME}/bin
# 
# # 21 Mb
# ENV SCALA_VERSION 2.12.4
# ENV SCALA_HOME /usr/lib/scala
# ARG SCALA_BASE_URL=https://downloads.lightbend.com/scala/${SCALA_VERSION}
# RUN mkdir -p ${SCALA_HOME} \
#     && curl -skL --retry 3 ${SCALA_BASE_URL}/scala-${SCALA_VERSION}.tgz \
#         | tar xz -C ${SCALA_HOME}
# ENV SCALA_HOME ${SCALA_HOME}/scala-${SCALA_VERSION}
# ENV PATH ${PATH}:${SCALA_HOME}/bin
# 
# 
# ENV KOTLIN_VERSION 1.1.60
# ENV KOTLIN_HOME /usr/lib/kotlin
# ARG KOTLIN_BASE_URL=https://github.com/JetBrains/kotlin/releases/download/v${KOTLIN_VERSION}
# RUN mkdir -p ${KOTLIN_HOME} \
#     && curl -skL --retry 3 ${KOTLIN_BASE_URL}/kotlin-compiler-${KOTLIN_VERSION}.zip \
#         -o ${KOTLIN_HOME}/kotlin.zip \
#     && (cd ${KOTLIN_HOME}; unzip kotlin.zip; rm -f kotlin.zip)
# ENV KOTLIN_HOME ${KOTLIN_HOME}/kotlinc
# ENV PATH ${PATH}:${KOTLIN_HOME}/bin


# ENV GROOVY_VERSION 2.4.12
# ENV GROOVY_HOME /usr/lib/groovy
# ARG GROOVY_BASE_URL=https://bintray.com/artifact/download/groovy/maven
# RUN mkdir -p ${GROOVY_HOME} \
#     && curl -skL --retry 3 ${GROOVY_BASE_URL}/apache-groovy-binary-${GROOVY_VERSION}.zip \
#         -o ${GROOVY_HOME}/groovy.zip \
#     && (cd ${GROOVY_HOME}; unzip groovy.zip; rm -f groovy.zip)
# ENV GROOVY_HOME ${GROOVY_HOME}/groovy-${GROOVY_VERSION}
# ENV PATH ${PATH}:${GROOVY_HOME}/bin
EOF

echo
echo Building image "'${NAME}'"
echo
docker build -t "${NAME}" "${thisdir}"
rm -rf dotfiles

