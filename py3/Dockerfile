# Dockerfile for image 'zppz/py3:20180318'
# Generated by 'build.sh'.
#
# DO NOT EDIT.

FROM python:3.6.4-slim-stretch

USER root

USER root

#------------------
# group and user

RUN groupadd --gid 1000 docker \
    && mkdir -p /home/docker-user \
    && useradd --uid 1000 --gid docker --no-user-group --home /home/docker-user --shell /bin/bash docker-user \
    && chown -R docker-user:docker /home/docker-user \
    && chmod -R u=rwx,g=rwx,o=r /home/docker-user

# Giving 'g=rwx' to /home/docker-user is a hack around mapped-volume permission issues.

# If root privilage is needed, install `sudo`, and add
# RUN usermod -a -G sudo docker-user \
#   && echo 'docker-user ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/docker-user \
#   && chmod 0440 /etc/sudoers.d/docker-user

# Subsequently, when you use `sudo command ...`, the environment is different.
# To preserve environment, use the `-E -H` options.
# However, strangely, `PYTHONPATH` is not preserved.
# You can simply do this:
#   sudo PYTHONPAH=$PYTHONPATH command ...

#-----------
# Very basic

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        bzip2 \
        curl \
        less \
        tree \
        unzip \
        xz-utils \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/*

COPY dotfiles/bash/bashrc /etc/bash.bashrc
RUN chmod +r /etc/bash.bashrc


#------------------
# entrypoint

ENV TINI_VERSION v0.17.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

ENTRYPOINT ["/usr/bin/tini", "--"]
# TODO: problematic when I terminate some programs within container.


ENV SHELL=/bin/bash

CMD ["/bin/bash"]
WORKDIR /


#------------------
# editor

ENV NVIM_HOME=/etc/xdg/nvim
ENV NVIM_RPLUGIN_MANIFEST=${NVIM_HOME}/rplugin.vim
COPY dotfiles/nvim ${NVIM_HOME}/

ARG NEOVIM_URL=https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz

RUN curl -skL --retry 3 ${NEOVIM_URL} | tar xz -C /tmp \
    && mv /tmp/nvim-linux64 /usr/local/sbin/neovim \
    && ln -s /usr/local/sbin/neovim/bin/nvim /usr/local/bin/nvim \
    \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        git \
        xclip \
    \
    && pip install --no-cache-dir --upgrade \
        neovim \
        jedi \
    \
    && chmod -R +rX ${NVIM_HOME} \
    && mkdir -p ${NVIM_HOME}/bundle \
    && git clone https://github.com/VundleVim/Vundle.vim.git ${NVIM_HOME}/bundle/Vundle.vim \
    && nvim +PluginInstall +qall \
    && nvim +UpdateRemotePlugins +qall \
    \
    && ln -s $(which nvim) /usr/local/bin/vim \
    && cd ${NVIM_HOME}/bundle \
    && rm -rf */{.git*,doc,test,tests} \
    \
    && apt-get purge -y --auto-remove \
        git \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/*

# TODO: I don't know why but the above fails to delete the useless files
# under ${NVIM_HOME}/bundle.

ENV EDITOR vim

RUN pip install --no-cache-dir --upgrade \
        'pip==9.0.1' \
        'setuptools==38.5.2' \
        \
        'numpy==1.14.1' \
        'requests==2.18.4' \
        \
        'coverage==4.5.1' \
        'pytest==3.4.2'

# This section installs important tools for Python development.
# In general, do not install packages that are required for the software to run
# in this section. Restrict to development tools here.

# Documentation, testing, code analysis, code formatting.
# IPython, Jupyter Notebook.
# Notebook requires (and will install if not available) ipython, pyzmq, tornado, jinja2 and some other things.

# TODO:
# it is possible that this config file is not loaded by Jupyter Notebook.
ENV JUPYTER_CONFIG_DIR=/etc/xdg/jupyter/
COPY dotfiles/ipython/ipython_config.py /etc/xdg/ipython/profile_default/
COPY dotfiles/jupyter/jupyter_notebook_config.py ${JUPYTER_CONFIG_DIR}
COPY dotfiles/ptpython/config.py /home/docker-user/.ptpython/

RUN pip install --no-cache-dir --upgrade \
        'Faker==0.8.11' \
        'mypy==0.570' \
        'ptpython==0.41' \
        'pylint==1.8.2' \
        'Sphinx==1.7.1' \
        'yapf==0.20.2' \
    && pip install --no-cache-dir --upgrade \
        'ipdb==0.11' \
        'ipython==6.2.1' \
        'notebook==5.4.0' \
        'jupyterlab==0.31.12' \
    && chmod +r /etc/xdg/ipython/profile_default/ipython_config.py \
    && chown -R docker-user /home/docker-user/.ptpython \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        graphviz \
    && rm -rf /var/lib/apt/lists/* /tmp/*


# Use `yapf` to format Python code in-pace:
#   yapf -ir -vv --no-local-style .

# Other useful packages:
#    flake8
#    pudb
#    pyflakes
#    radon

# Other packages often useful for software development:
#    autoconf=2.69-8 \
#    automake=1:1.14.1-4+deb8u1 \
#    binutils=2.25-5
#    libtool=2.4.2-1.11 \
#    zlib1g-dev=1:1.2.8.dfsg-2+b1 \
#
# `binutils` contains `gprof`.
# To use `gprof`, use option `-pg` during both compiling and linking.

