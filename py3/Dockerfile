# Dockerfile for image 'zppz/py3:20171016'
# Generated by 'build.sh'.
#
# DO NOT EDIT.

FROM python:3.5.4-slim

USER root

USER root

#------------------
# group and user

RUN groupadd --gid 1000 docker \
    && mkdir -p /home/docker-user \
    && useradd --uid 1000 --gid docker --no-user-group --home /home/docker-user --shell /bin/bash docker-user \
    && chown -R docker-user:docker /home/docker-user \
    && chmod -R u=rwx,g=rwx,o=r /home/docker-user

# Giving 'g=rwx' to /home/docker-user is a hack around mapped-volume permission issues.

# If root privilage is needed, install `sudo`, and add
# RUN bash -c "echo -e '1234\1234' | passwd docker-user" \
#   && adduser docker-user admin


#-----------
# Very basic

# 'curl': about 15 MB.

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        bzip2 \
        curl \
        less \
        make \
        tree \
        unzip \
        xz-utils \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/*

COPY bashrc /etc/bash.bashrc
RUN chmod +r /etc/bash.bashrc


#------------------
# entrypoint

ENV TINI_VERSION v0.14.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

ENTRYPOINT ["/usr/bin/tini", "--"]
# TODO: problematic when I terminate some programs within container.


ENV SHELL=/bin/bash

CMD ["/bin/bash"]
WORKDIR /


#------------------
# editor

ENV NVIM_HOME=/etc/xdg/nvim
ENV NVIM_RPLUGIN_MANIFEST=${NVIM_HOME}/rplugin.vim
COPY dotfiles/nvim ${NVIM_HOME}/

ARG NEOVIM_URL=https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz

RUN curl -skL --retry 3 ${NEOVIM_URL} | tar xz -C /tmp \
    && mv /tmp/nvim-linux64 /usr/local/sbin/neovim \
    && ln -s /usr/local/sbin/neovim/bin/nvim /usr/local/bin/nvim \
    \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        git \
        xclip \
    \
    && pip install --no-cache-dir --upgrade \
        neovim \
        jedi \
    \
    && chmod -R +rX ${NVIM_HOME} \
    && mkdir -p ${NVIM_HOME}/bundle \
    && git clone https://github.com/VundleVim/Vundle.vim.git ${NVIM_HOME}/bundle/Vundle.vim \
    && nvim +PluginInstall +qall \
    && nvim +UpdateRemotePlugins +qall \
    \
    && ln -s $(which nvim) /usr/local/bin/vim \
    && cd ${NVIM_HOME}/bundle \
    && rm -rf */{.git*,doc,test,tests} \
    \
    && apt-get purge -y --auto-remove \
        git \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/*

# TODO: I don't know why but the above fails to delete the useless files
# under ${NVIM_HOME}/bundle.

ENV EDITOR vim


# This section installs important tools for Python development.
# In general, do not install packages that are required for the software to run
# in this section. Restrict to development tools here.

# Documentation, testing, debugging, code analysis, code formatting.
# IPython, Jupyter Notebook.
# Notebook requires (and will install if not available) ipython, pyzmq, tornado, jinja2 and some other things.

# TODO:
# it is possible that this config file is not loaded by Jupyter Notebook.
ENV JUPYTER_CONFIG_DIR=/etc/xdg/jupyter/
COPY ipython_config.py /etc/xdg/ipython/profile_default/
COPY jupyter_notebook_config.py ${JUPYTER_CONFIG_DIR}

RUN pip install --no-cache-dir --upgrade \
        'pip==9.0.1' \
        'setuptools==36.6.0' \
    && pip install --no-cache-dir --upgrade \
        'coverage==4.4.1' \
        'Faker==0.8.5' \
        'memory_profiler==0.47' \
        'mypy==0.530' \
        'pylint==1.7.4' \
        'pytest==3.2.3' \
        'yapf==0.19.0' \
    && pip install --no-cache-dir --upgrade \
        'ipdb==0.10.3' \
        'ipython==6.2.1' \
        'notebook==5.2.0' \
    && chmod +r /etc/xdg/ipython/profile_default/ipython_config.py \
    \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        graphviz \
    && pip install --no-cache-dir --upgrade \
        'Sphinx==1.6.4' \
    && apt-get install -y --no-install-recommends \
        gcc \
        libc6-dev \
    && pip install --no-cache-dir --upgrade \
        'line_profiler==2.0' \
    && apt-get purge -y --auto-remove \
        gcc \
        libc6-dev \
    && rm -rf /var/lib/apt/lists/* /tmp/*

# Installing `line_profiler` needs gcc.
# Use `snakeviz` to view profiling stats.
# `snakeviz` is not installed in this Docker image as it's better
# installed on the hosting machine 'natively'.
#

# By default, Jupyter Notebook uses port 8888.
# Launch a container with Jupyter Notebook server like this:
# $docker run --rm -it --expose=8888 -p 8888:8888 imagename jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 --NotebookApp.notebook_dir=/home/docker-user --NotebookApp.token=''

# EXPOSE 8888
#
# RUN echo '#!/usr/bin/env bash' > /usr/local/bin/ipynb \
#     && echo >> /usr/local/bin/ipynb \
#     && echo "jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 --NotebookApp.notebook_dir=\~ --NotebookApp.token=''" >> /usr/local/bin/ipynb \\
#     && chmod +x /usr/local/bin/ipynb

# Other useful packages:
#    flake8
#    pudb
#    pyflakes
#    radon

# Other packages often useful for software development:
#    autoconf=2.69-8 \
#    automake=1:1.14.1-4+deb8u1 \
#    binutils=2.25-5
#    libtool=2.4.2-1.11 \
#    zlib1g-dev=1:1.2.8.dfsg-2+b1 \
#    gcc=4:4.9.2-2 \
#    libc6-dev=2.19-18+deb8u7 \
#    make=4.0-8.1 \
#
# `binutils` contains `gprof`.
# To use `gprof`, use option `-pg` during both compiling and linking.

