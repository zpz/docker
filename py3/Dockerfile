# Dockerfile for image 'zppz/py3:20161202'

#===========================
# Generated by 'build.sh'.
#
# DO NOT EDIT.
#===========================

FROM python:3.5.2-slim

USER root
WORKDIR /

#------------------
# group and user

RUN groupadd --gid 1000 docker-users \
    && mkdir -p /home/docker-user \
    && useradd --uid 1000 --gid docker-users --no-user-group --home /home/docker-user --shell /bin/bash docker-user \
    && chown -R docker-user:docker-users /home/docker-user


#------------------
# System and basic

# 'curl': about 15 MB.
# 'vim': about 20MB.

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        less \
        vim \
    \
    && curl -skL https://github.com/zpz/linux/archive/master.tar.gz |tar xz -C /tmp/ \
    && mv /tmp/linux-master /tmp/dotfiles \
    && cp /tmp/dotfiles/bash/bashrc /etc/bash.bashrc \
    && chmod +r /etc/bash.bashrc \
    && mkdir -p /etc/vim \
    && cp /tmp/dotfiles/vim/vimrc /etc/vim/vimrc.local \
    && cp -r /tmp/dotfiles/vim/vim/* /etc/vim/ \
    && chmod -R +rX /etc/vim \
    \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

ENV SHELL=/bin/bash
ENV EDITOR vim


#------------------
# entrypoint

ENV TINI_VERSION v0.13.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

ENTRYPOINT ["/usr/bin/tini", "--"]
# TODO: problematic when I terminate some programs within container.

# Documentation
# 'graphviz' and 'make' are to be used with Sphinx.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        graphviz \
        make \
    && pip install --no-cache-dir --upgrade \
        'Sphinx==1.4.8' \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

# IPython, Jupyter Notebook
# notebook requires (and will install if not available) ipython, pyzmq, tornado, jinja2 and some other things.

RUN pip install --no-cache-dir --upgrade \
        'ipython==5.1.0' \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
    && pip install --no-cache-dir --upgrade \
        'notebook==4.2.3' \
    && apt-get purge -y --auto-remove \
        build-essential \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

# By default, Jupyter Notebook uses port 8888.
# Launch a container with Jupyter Notebook server like this:
# $docker run --rm -it --expose=8888 -p 8888:8888 imagename jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 --NotebookApp.notebook_dir=/home/docker-user

# Testing, Debugging, code analysis, code formatting

RUN pip install --no-cache-dir --upgrade \
        'ipdb==0.10.1' \
        'pudb==2016.2' \
        'pylint==1.6.4' \
        'pytest==3.0.4' \
        'yapf==0.14.0'

# Python header files (python3-dev on linux)

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        xz-utils \
    && mkdir /tmp/python \
    && target="https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-${PYTHON_VERSION}.tar.xz" \
    && curl -skL ${target} | tar -xJC /tmp/python --strip-components=1 \
    && mv /tmp/python/Include /usr/include/python3.5m \
    && ln -s /usr/include/python3.5m /usr/include/python3.5 \
    && apt-get purge -y --auto-remove \
        xz-utils \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

CMD ["python"]
