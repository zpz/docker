# Dockerfile for image 'zppz/py3:20170201'

#===========================
# Generated by 'build.sh'.
#
# DO NOT EDIT.
#===========================

FROM python:3.6.0-slim

USER root
WORKDIR /

#------------------
# group and user

RUN groupadd --gid 1000 docker-users \
    && mkdir -p /home/docker-user \
    && useradd --uid 1000 --gid docker-users --no-user-group --home /home/docker-user --shell /bin/bash docker-user \
    && chown -R docker-user:docker-users /home/docker-user

# If root privilage is needed, install `sudo`, and add
# RUN bash -c "echo -e '1234\1234' | passwd docker-user" \
#   && adduser docker-user admin


#------------------
# System and basic

# 'curl': about 15 MB.
# 'vim': about 20MB.

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        curl \
        g++ \
        gcc \
        less \
        libc6-dev \
        libtool \
        make \
        vim \
        xz-utils \
        zlib1g-dev \
    \
    && curl -skL https://github.com/zpz/linux/archive/master.tar.gz |tar xz -C /tmp/ \
    && mv /tmp/linux-master /tmp/dotfiles \
    && cp /tmp/dotfiles/bash/bashrc /etc/bash.bashrc \
    && chmod +r /etc/bash.bashrc \
    && mkdir -p /etc/vim \
    && cp /tmp/dotfiles/vim/vimrc /etc/vim/vimrc.local \
    && cp -r /tmp/dotfiles/vim/vim/* /etc/vim/ \
    && chmod -R +rX /etc/vim \
    \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get -y autoremove \
    && apt-get clean

ENV SHELL=/bin/bash
ENV EDITOR vim


#------------------
# entrypoint

#  ENV TINI_VERSION v0.13.2
#  ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
#  RUN chmod +x /usr/bin/tini
#
#  ENTRYPOINT ["/usr/bin/tini", "--"]
#  # TODO: problematic when I terminate some programs within container.


# Documentation
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        graphviz \
    && pip install --no-cache-dir --upgrade \
        'Sphinx==1.5.2' \
    && rm -rf /var/lib/apt/lists/* /tmp/* \
    && apt-get autoremove -y \
    && apt-get clean -y

# Testing, Debugging, code analysis, code formatting.
# IPython, Jupyter Notebook, other commomly useful packages.
# Notebook requires (and will install if not available) ipython, pyzmq, tornado, jinja2 and some other things.

RUN pip install --no-cache-dir --upgrade \
        'coverage==4.3.4' \
        'flake8==3.2.1' \
        'ipdb==0.10.2' \
        'ipython==5.2.1' \
        'line_profiler==2.0' \
        'memory_profiler==0.43' \
        'notebook==4.3.2' \
        'numpy==1.12.0' \
        'pudb==2016.2' \
        'pyflakes==1.5.0' \
        'pylint==1.6.5' \
        'pytest==3.0.6' \
        'requests==2.13.0' \
        'snakeviz==0.4.1' \
        'yapf==0.15.2'


# By default, Jupyter Notebook uses port 8888.
# Launch a container with Jupyter Notebook server like this:
# $docker run --rm -it --expose=8888 -p 8888:8888 imagename jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 --NotebookApp.notebook_dir=/home/docker-user --NotebookApp.token=''

EXPOSE 8888

RUN echo '#!/usr/bin/env bash' > /usr/local/bin/ipynb \
    && echo >> /usr/local/bin/ipynb \
    && echo "jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 --NotebookApp.notebook_dir=\~ --NotebookApp.token=''" >> /usr/local/bin/ipynb \\
    && chmod +x /usr/local/bin/ipynb


CMD ["python"]
